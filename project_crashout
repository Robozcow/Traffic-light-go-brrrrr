/* Project 5 Part C - Controlling Traffic 
by: Micah Waddell */

#include <Arduino.h>  // Arduino library for functions

#define WEST_BUTTON 3
#define EAST_BUTTON 13
#define PED_BUTTON 4
#define PED_LIGHT 5

#define WEST_RED 2
#define WEST_YELLOW 1
#define WEST_GREEN 0
#define EAST_RED 12
#define EAST_YELLOW 11
#define EAST_GREEN 10

// timing constants
#define YELLOW_BLINK_TIME 250
#define FLOW_TIME 10000
#define CHANGE_DELAY 1500
#define PED_CROSS_TIME 8000

// track current traffic direction (true = west-to-east, false = east-to-west)
int trafficWest = 1;
int lastPedButtonState = LOW;  // previous state of pedestrian button

// Function prototypes
void blinkYellow(int pin);
void setGreen(int redPin, int greenPin);
void goToRed(int greenPin, int yellowPin, int redPin, bool blink);
void handlePedestrian();

void setup() {
  pinMode(WEST_BUTTON, INPUT);
  pinMode(EAST_BUTTON, INPUT);
  pinMode(PED_BUTTON, INPUT);

  pinMode(PED_LIGHT, OUTPUT);
  pinMode(WEST_RED, OUTPUT);
  pinMode(WEST_YELLOW, OUTPUT);
  pinMode(WEST_GREEN, OUTPUT);
  pinMode(EAST_RED, OUTPUT);
  pinMode(EAST_YELLOW, OUTPUT);
  pinMode(EAST_GREEN, OUTPUT);

  // Initial light state: west gets green, east is red
  digitalWrite(WEST_RED, LOW);
  digitalWrite(WEST_YELLOW, LOW);
  digitalWrite(WEST_GREEN, HIGH);

  digitalWrite(EAST_RED, HIGH);
  digitalWrite(EAST_YELLOW, LOW);
  digitalWrite(EAST_GREEN, LOW);

  digitalWrite(PED_LIGHT, LOW);
}

void loop() {
  static unsigned long lastSwitchTime = millis();
  static bool inPedestrianMode = false;

  // Pedestrian button edge detection
  int currentPedButtonState = digitalRead(PED_BUTTON);

  if (currentPedButtonState == HIGH && lastPedButtonState == LOW && !inPedestrianMode) {
    inPedestrianMode = true;
    handlePedestrian();
    inPedestrianMode = false;
    lastSwitchTime = millis();  // reset timer after pedestrian
  }
  lastPedButtonState = currentPedButtonState;

  // Normal automatic flow switching based on time
  if (millis() - lastSwitchTime > FLOW_TIME) {
    if (trafficWest) {
      trafficWest = 0;
      goToRed(WEST_GREEN, WEST_YELLOW, WEST_RED, true);
      setGreen(EAST_RED, EAST_GREEN);
    } else {
      trafficWest = 1;
      goToRed(EAST_GREEN, EAST_YELLOW, EAST_RED, false);
      setGreen(WEST_RED, WEST_GREEN);
    }
    lastSwitchTime = millis();
  }
}

void blinkYellow(int pin) {
  for (int i = 0; i < 5; i++) {
    digitalWrite(pin, LOW);
    delay(YELLOW_BLINK_TIME);
    digitalWrite(pin, HIGH);
    delay(YELLOW_BLINK_TIME);
  }
  digitalWrite(pin, LOW);
}

void setGreen(int redPin, int greenPin) {
  digitalWrite(redPin, LOW);
  digitalWrite(greenPin, HIGH);
}

void goToRed(int greenPin, int yellowPin, int redPin, bool blink) {
  digitalWrite(greenPin, LOW);

  if (blink) {
    blinkYellow(yellowPin);
  } else {
    digitalWrite(yellowPin, HIGH);
    delay(CHANGE_DELAY);
    digitalWrite(yellowPin, LOW);
  }

  digitalWrite(redPin, HIGH);
  delay(CHANGE_DELAY);
}

void handlePedestrian() {
  // Save current light state
  bool wasWestGreen = digitalRead(WEST_GREEN) == HIGH;
  bool wasEastGreen = digitalRead(EAST_GREEN) == HIGH;

  // Safely turn green lights to red
  if (wasWestGreen) {
    goToRed(WEST_GREEN, WEST_YELLOW, WEST_RED, true);
  }

  if (wasEastGreen) {
    goToRed(EAST_GREEN, EAST_YELLOW, EAST_RED, false);
  }

  // Pedestrian crosses
  digitalWrite(PED_LIGHT, HIGH);
  delay(PED_CROSS_TIME);
  digitalWrite(PED_LIGHT, LOW);

  // Restore previous traffic direction
  if (wasWestGreen) {
    setGreen(WEST_RED, WEST_GREEN);
    trafficWest = 1;
  } else if (wasEastGreen) {
    setGreen(EAST_RED, EAST_GREEN);
    trafficWest = 0;
  }
}
