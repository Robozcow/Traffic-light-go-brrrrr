#include <Arduino.h>

// Inputs
#define WEST_BUTTON 3
#define EAST_BUTTON 13
#define PED_BUTTON 4
#define EMERGENCY_OVERRIDE_PIN 6
#define WEST_OVERRIDE_PIN 7
#define EAST_OVERRIDE_PIN 8

// Outputs
#define PED_LIGHT 5
#define WEST_RED 2
#define WEST_YELLOW 1
#define WEST_GREEN 0
#define EAST_RED 12
#define EAST_YELLOW 11
#define EAST_GREEN 10

// Timing
#define YELLOW_BLINK_TIME 250
#define FLOW_TIME 1000
#define CHANGE_DELAY 1500
#define PED_CROSS_TIME 8000
#define OVERRIDE_TIME 5000

// State tracking
int trafficWest = 1;
int lastPedButtonState = LOW;

bool emergencyActive = false;
unsigned long emergencyStartTime = 0;

bool overrideActive = false;
unsigned long overrideStartTime = 0;
enum OverrideDirection { NONE, WEST, EAST };
OverrideDirection overrideDirection = NONE;

bool wasWestGreen = false;
bool wasEastGreen = false;

// Function declarations
void blinkYellow(int pin);
void setGreen(int redPin, int greenPin);
void goToRed(int greenPin, int yellowPin, int redPin, bool blink);
void handlePedestrian();
void forceOverride(OverrideDirection direction);

void setup() {
  pinMode(WEST_BUTTON, INPUT);
  pinMode(EAST_BUTTON, INPUT);
  pinMode(PED_BUTTON, INPUT);
  pinMode(EMERGENCY_OVERRIDE_PIN, INPUT);
  pinMode(WEST_OVERRIDE_PIN, INPUT);
  pinMode(EAST_OVERRIDE_PIN, INPUT);

  pinMode(PED_LIGHT, OUTPUT);
  pinMode(WEST_RED, OUTPUT);
  pinMode(WEST_YELLOW, OUTPUT);
  pinMode(WEST_GREEN, OUTPUT);
  pinMode(EAST_RED, OUTPUT);
  pinMode(EAST_YELLOW, OUTPUT);
  pinMode(EAST_GREEN, OUTPUT);

  digitalWrite(WEST_GREEN, HIGH);
  digitalWrite(WEST_YELLOW, LOW);
  digitalWrite(WEST_RED, LOW);

  digitalWrite(EAST_GREEN, LOW);
  digitalWrite(EAST_YELLOW, LOW);
  digitalWrite(EAST_RED, HIGH);

  digitalWrite(PED_LIGHT, LOW);
}

void loop() {
  static unsigned long lastSwitchTime = millis();
  static bool inPedestrianMode = false;

  // --- Emergency override ---
  if (!emergencyActive && digitalRead(EMERGENCY_OVERRIDE_PIN) == HIGH) {
    emergencyActive = true;
    emergencyStartTime = millis();

    digitalWrite(WEST_GREEN, HIGH);
    digitalWrite(EAST_GREEN, HIGH);
    digitalWrite(WEST_YELLOW, LOW);
    digitalWrite(EAST_YELLOW, LOW);
    digitalWrite(WEST_RED, LOW);
    digitalWrite(EAST_RED, LOW);

    return;
  }

  if (emergencyActive) {
    if (millis() - emergencyStartTime >= OVERRIDE_TIME) {
      digitalWrite(WEST_GREEN, LOW);
      digitalWrite(EAST_GREEN, LOW);
      digitalWrite(EAST_RED, HIGH);
      setGreen(WEST_RED, WEST_GREEN);
      trafficWest = 1;
      emergencyActive = false;
      lastSwitchTime = millis();
    }
    return;
  }

  // --- Manual override (West) ---
  if (!overrideActive && digitalRead(WEST_OVERRIDE_PIN) == HIGH) {
    forceOverride(WEST);
    return;
  }

  // --- Manual override (East) ---
  if (!overrideActive && digitalRead(EAST_OVERRIDE_PIN) == HIGH) {
    forceOverride(EAST);
    return;
  }

  // --- Handle override timer expiration ---
  if (overrideActive && millis() - overrideStartTime >= OVERRIDE_TIME) {
    digitalWrite(WEST_GREEN, LOW);
    digitalWrite(EAST_GREEN, LOW);

    if (wasWestGreen) {
      setGreen(WEST_RED, WEST_GREEN);
      digitalWrite(EAST_RED, HIGH);
      trafficWest = 1;
    } else if (wasEastGreen) {
      setGreen(EAST_RED, EAST_GREEN);
      digitalWrite(WEST_RED, HIGH);
      trafficWest = 0;
    }

    overrideActive = false;
    overrideDirection = NONE;
    lastSwitchTime = millis();
  }

  // --- Pedestrian request ---
  int currentPedButtonState = digitalRead(PED_BUTTON);
  if (currentPedButtonState == HIGH && lastPedButtonState == LOW && !inPedestrianMode && !overrideActive) {
    inPedestrianMode = true;
    handlePedestrian();
    inPedestrianMode = false;
    lastSwitchTime = millis();
  }
  lastPedButtonState = currentPedButtonState;

  // --- Normal traffic switching ---
  if (!overrideActive && millis() - lastSwitchTime > FLOW_TIME) {
    if (trafficWest) {
      trafficWest = 0;
      goToRed(WEST_GREEN, WEST_YELLOW, WEST_RED, true);
      setGreen(EAST_RED, EAST_GREEN);
    } else {
      trafficWest = 1;
      goToRed(EAST_GREEN, EAST_YELLOW, EAST_RED, false);
      setGreen(WEST_RED, WEST_GREEN);
    }
    lastSwitchTime = millis();
  }
}

void forceOverride(OverrideDirection direction) {
  overrideActive = true;
  overrideStartTime = millis();
  overrideDirection = direction;

  wasWestGreen = digitalRead(WEST_GREEN) == HIGH;
  wasEastGreen = digitalRead(EAST_GREEN) == HIGH;

  // Clear all
  digitalWrite(WEST_GREEN, LOW);
  digitalWrite(WEST_YELLOW, LOW);
  digitalWrite(WEST_RED, LOW);
  digitalWrite(EAST_GREEN, LOW);
  digitalWrite(EAST_YELLOW, LOW);
  digitalWrite(EAST_RED, LOW);

  if (direction == WEST) {
    digitalWrite(WEST_GREEN, HIGH);
    digitalWrite(EAST_RED, HIGH);
  } else if (direction == EAST) {
    digitalWrite(EAST_GREEN, HIGH);
    digitalWrite(WEST_RED, HIGH);
  }
}

void blinkYellow(int pin) {
  for (int i = 0; i < 5; i++) {
    digitalWrite(pin, LOW);
    delay(YELLOW_BLINK_TIME);
    digitalWrite(pin, HIGH);
    delay(YELLOW_BLINK_TIME);
  }
  digitalWrite(pin, LOW);
}

void setGreen(int redPin, int greenPin) {
  digitalWrite(redPin, LOW);
  digitalWrite(greenPin, HIGH);
}

void goToRed(int greenPin, int yellowPin, int redPin, bool blink) {
  digitalWrite(greenPin, LOW);
  if (blink) {
    blinkYellow(yellowPin);
  } else {
    digitalWrite(yellowPin, HIGH);
    delay(CHANGE_DELAY);
    digitalWrite(yellowPin, LOW);
  }
  digitalWrite(redPin, HIGH);
  delay(CHANGE_DELAY);
}

void handlePedestrian() {
  bool westWasGreen = digitalRead(WEST_GREEN) == HIGH;
  bool eastWasGreen = digitalRead(EAST_GREEN) == HIGH;

  if (westWasGreen) goToRed(WEST_GREEN, WEST_YELLOW, WEST_RED, true);
  if (eastWasGreen) goToRed(EAST_GREEN, EAST_YELLOW, EAST_RED, false);

  digitalWrite(PED_LIGHT, HIGH);
  delay(PED_CROSS_TIME);
  digitalWrite(PED_LIGHT, LOW);

  if (westWasGreen) {
    setGreen(WEST_RED, WEST_GREEN);
    trafficWest = 1;
  } else if (eastWasGreen) {
    setGreen(EAST_RED, EAST_GREEN);
    trafficWest = 0;
  }
}
